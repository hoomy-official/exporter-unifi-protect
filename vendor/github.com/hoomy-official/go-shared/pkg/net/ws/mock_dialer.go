// Code generated by mockery. DO NOT EDIT.

package ws

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockDialer is an autogenerated mock type for the Dialer type
type MockDialer struct {
	mock.Mock
}

type MockDialer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDialer) EXPECT() *MockDialer_Expecter {
	return &MockDialer_Expecter{mock: &_m.Mock}
}

// Dial provides a mock function with given fields: ctx, url
func (_m *MockDialer) Dial(ctx context.Context, url string) (Connecter, *http.Response, error) {
	ret := _m.Called(ctx, url)

	if len(ret) == 0 {
		panic("no return value specified for Dial")
	}

	var r0 Connecter
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (Connecter, *http.Response, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) Connecter); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Connecter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, url)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, url)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDialer_Dial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dial'
type MockDialer_Dial_Call struct {
	*mock.Call
}

// Dial is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
func (_e *MockDialer_Expecter) Dial(ctx interface{}, url interface{}) *MockDialer_Dial_Call {
	return &MockDialer_Dial_Call{Call: _e.mock.On("Dial", ctx, url)}
}

func (_c *MockDialer_Dial_Call) Run(run func(ctx context.Context, url string)) *MockDialer_Dial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDialer_Dial_Call) Return(_a0 Connecter, _a1 *http.Response, _a2 error) *MockDialer_Dial_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDialer_Dial_Call) RunAndReturn(run func(context.Context, string) (Connecter, *http.Response, error)) *MockDialer_Dial_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDialer creates a new instance of MockDialer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDialer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDialer {
	mock := &MockDialer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
