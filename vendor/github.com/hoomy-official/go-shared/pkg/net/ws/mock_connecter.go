// Code generated by mockery. DO NOT EDIT.

package ws

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockConnecter is an autogenerated mock type for the Connecter type
type MockConnecter struct {
	mock.Mock
}

type MockConnecter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnecter) EXPECT() *MockConnecter_Expecter {
	return &MockConnecter_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: code, reason
func (_m *MockConnecter) Close(code StatusCode, reason string) error {
	ret := _m.Called(code, reason)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(StatusCode, string) error); ok {
		r0 = rf(code, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnecter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConnecter_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - code StatusCode
//   - reason string
func (_e *MockConnecter_Expecter) Close(code interface{}, reason interface{}) *MockConnecter_Close_Call {
	return &MockConnecter_Close_Call{Call: _e.mock.On("Close", code, reason)}
}

func (_c *MockConnecter_Close_Call) Run(run func(code StatusCode, reason string)) *MockConnecter_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(StatusCode), args[1].(string))
	})
	return _c
}

func (_c *MockConnecter_Close_Call) Return(_a0 error) *MockConnecter_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnecter_Close_Call) RunAndReturn(run func(StatusCode, string) error) *MockConnecter_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CloseNow provides a mock function with given fields:
func (_m *MockConnecter) CloseNow() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseNow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnecter_CloseNow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseNow'
type MockConnecter_CloseNow_Call struct {
	*mock.Call
}

// CloseNow is a helper method to define mock.On call
func (_e *MockConnecter_Expecter) CloseNow() *MockConnecter_CloseNow_Call {
	return &MockConnecter_CloseNow_Call{Call: _e.mock.On("CloseNow")}
}

func (_c *MockConnecter_CloseNow_Call) Run(run func()) *MockConnecter_CloseNow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnecter_CloseNow_Call) Return(_a0 error) *MockConnecter_CloseNow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnecter_CloseNow_Call) RunAndReturn(run func() error) *MockConnecter_CloseNow_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx
func (_m *MockConnecter) Read(ctx context.Context) (MessageType, []byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 MessageType
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (MessageType, []byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) MessageType); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(MessageType)
	}

	if rf, ok := ret.Get(1).(func(context.Context) []byte); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockConnecter_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockConnecter_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConnecter_Expecter) Read(ctx interface{}) *MockConnecter_Read_Call {
	return &MockConnecter_Read_Call{Call: _e.mock.On("Read", ctx)}
}

func (_c *MockConnecter_Read_Call) Run(run func(ctx context.Context)) *MockConnecter_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConnecter_Read_Call) Return(_a0 MessageType, _a1 []byte, _a2 error) *MockConnecter_Read_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockConnecter_Read_Call) RunAndReturn(run func(context.Context) (MessageType, []byte, error)) *MockConnecter_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Reader provides a mock function with given fields: ctx
func (_m *MockConnecter) Reader(ctx context.Context) (MessageType, io.Reader, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Reader")
	}

	var r0 MessageType
	var r1 io.Reader
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (MessageType, io.Reader, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) MessageType); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(MessageType)
	}

	if rf, ok := ret.Get(1).(func(context.Context) io.Reader); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.Reader)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockConnecter_Reader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reader'
type MockConnecter_Reader_Call struct {
	*mock.Call
}

// Reader is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConnecter_Expecter) Reader(ctx interface{}) *MockConnecter_Reader_Call {
	return &MockConnecter_Reader_Call{Call: _e.mock.On("Reader", ctx)}
}

func (_c *MockConnecter_Reader_Call) Run(run func(ctx context.Context)) *MockConnecter_Reader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConnecter_Reader_Call) Return(_a0 MessageType, _a1 io.Reader, _a2 error) *MockConnecter_Reader_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockConnecter_Reader_Call) RunAndReturn(run func(context.Context) (MessageType, io.Reader, error)) *MockConnecter_Reader_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnecter creates a new instance of MockConnecter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnecter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnecter {
	mock := &MockConnecter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
